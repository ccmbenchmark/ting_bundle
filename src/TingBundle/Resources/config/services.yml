services:
    ting.metadatarepository:
        class: CCMBenchmark\Ting\MetadataRepository
        arguments: ["@=service('ting.metadatafactory')"]

    ting.queryfactory:
        class: CCMBenchmark\Ting\Query\QueryFactory

    ting.driverlogger:
        synthetic: true

    ting.connectionpool:
        class: CCMBenchmark\Ting\ConnectionPool

    ting.unitofwork:
        class: CCMBenchmark\Ting\UnitOfWork
        arguments: ["@=service('ting.connectionpool')", "@=service('ting.metadatarepository')", "@=service('ting.queryfactory')"]

    ting.hydrator:
        class: CCMBenchmark\Ting\Repository\Hydrator
        arguments: ["@=service('ting.metadatarepository')", "@=service('ting.unitofwork')"]

    ting.collectionfactory:
        class: CCMBenchmark\Ting\Repository\CollectionFactory
        arguments: ["@=service('ting.hydrator')"]

    ting.cache:
        class: CCMBenchmark\Ting\Cache\Memcached

    ting.driver_data_collector:
        class: CCMBenchmark\TingBundle\DataCollector\TingDriverDataCollector
        tags:
            - {name: data_collector, template:"TingBundle:Collector:driverCollector", id:"ting.driver"}

    ting.cache_data_collector:
        class: CCMBenchmark\TingBundle\DataCollector\TingCacheDataCollector
        tags:
            - {name: data_collector, template:"TingBundle:Collector:cacheCollector", id:"ting.cache"}

    ting:
        class: CCMBenchmark\Ting\Repository\RepositoryFactory
        arguments:
            - "@=service('ting.connectionpool')"
            - "@=service('ting.metadatarepository')"
            - "@=service('ting.queryfactory')"
            - "@=service('ting.collectionfactory')"
            - "@=service('ting.unitofwork')"
            - "@=service('ting.cache')"

    ting.metadata_warmer:
        class: CCMBenchmark\TingBundle\Cache\MetadataWarmer
        arguments:
            - "@=service('service_container')"
        tags:
            - {name: kernel.cache_warmer, priority:0}
